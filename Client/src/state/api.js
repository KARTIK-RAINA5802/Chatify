import { createApi, fetchBaseQuery } from "@reduxjs/toolkit/query/react";

export const api = createApi({
  baseQuery: fetchBaseQuery({ baseUrl: import.meta.env.VITE_BASE_URL }), /* This tells the API client to send requests to that URL as the base URL for all API endpoints. */
  reducerPath: "main",
  tagTypes: [],
  endpoints: (build) => ({
    postAiText: build.mutation({
      query: (payload) => ({
        url: "openai/text",
        method: "POST",
        body: payload,
      }),
    }),
    postAiCode: build.mutation({
      query: (payload) => ({
        url: "openai/code",
        method: "POST",
        body: payload,
      }),
    }),
    postAiAssist: build.mutation({
      query: (payload) => ({
        url: "openai/assist",
        method: "POST",
        body: payload,
      }),
    }),
    postLogin: build.mutation({
      query: (payload) => ({
        url: "auth/login",
        method: "POST",
        body: payload,
      }),
    }),
    postSignUp: build.mutation({
      query: (payload) => ({
        url: "auth/signup",
        method: "POST",
        body: payload,
      }),
    }),
  }),
});

/* 
This code creates an API client using the createApi function. 
It takes an object with several configuration options:

baseQuery: Specifies the function to be used for making network requests. In this case, it uses fetchBaseQuery from Redux Toolkit Query, which is a wrapper around fetch.
reducerPath: Defines the name of the Redux slice where the API state will be stored.
tagTypes: Allows you to define custom tags for your API endpoints, but in this case, it's an empty array.
endpoints: Defines the API endpoints using the build object. Each endpoint is defined using the build.mutation function, which sets up a mutation request (POST request with data).
The endpoint definitions include the URL, HTTP method, and request body for each mutation. There are five endpoints defined in this example: postAiText, postAiCode, postAiAssist, postLogin, and postSignUp. 
Each endpoint represents a different API request. 

*/


export const {
  usePostAiTextMutation,
  usePostAiCodeMutation,
  usePostAiAssistMutation,
  usePostLoginMutation,
  usePostSignUpMutation,
} = api;

/* 

This code exports hooks generated by Redux Toolkit Query for each defined endpoint. 
These hooks can be used in React components to perform the respective API requests. 
The hooks are named based on the endpoint names, followed by "Mutation."

To use these hooks, you import them into your React components and call them to 
initiate the corresponding API requests. The hooks handle the request lifecycle, 
including sending the request, handling loading and error states, and returning 
the response data.

Overall, this code sets up an API client using Redux Toolkit Query, defines 
multiple API endpoints for different requests, and exports hooks to use those
endpoints in React components.

*/